"""–°–µ—Ä–≤–µ—Ä –¥–ª—è –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∏ —É—á–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ –¢–µ–ª–µ–≥–µ"""
import logging
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import CallbackQuery

from words_gen import gen_message_string_with_random_words, gen_quiz

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

quiz_controller_dict = {}


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    await message.answer(
        "<u><b>–ë–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤</b></u>\n\n"
        "<i>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥</i>\n\n"
        "–ü—Ä–∏c–ª–∞—Ç—å 5 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤: /words\n\n"
        "–ù–∞—á–∞—Ç—å –∫–≤–∏–∑: /quiz\n\n"
        "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑: /stop_quiz\n\n"
        "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É: /help\n\n"
        "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: /start",
        parse_mode=types.ParseMode.HTML
        )


@dp.message_handler(commands=['words'])
async def send_words(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã–π —Å–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    words_gen = gen_message_string_with_random_words()
    await message.answer(words_gen, parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands=['stop_quiz'])
async def stop_quiz(message: types.Message):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º quiz"""
    try:
        if quiz_controller_dict[message.chat.id]["quiz_started"]:
            quiz_controller_dict[message.chat.id]["quiz_started"]=False
            await message.answer("–û–∫–µ–π, Quiz –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await print_quiz_results(message)
        else:
            await message.answer("Quiz —É–∂–µ –¥–∞–≤–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç &#128579",parse_mode=types.ParseMode.HTML)
    except:
        await message.answer("Quiz –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏... &#128579",parse_mode=types.ParseMode.HTML)
    

@dp.message_handler(commands=['quiz'])
async def start_quiz(message: types.Message):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è quiz"""
    quiz_controller_dict.update({
        message.chat.id:
            {"attempt":0,
            "right_ans":0,
            "quiz_started":True}
        })

    await message.answer("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!\n"
                    "3..2..1.. –ü–æ–µ—Ö–∞–ª–∏.. </b> üöÄüöÄüöÄ", 
                parse_mode=types.ParseMode.HTML)

    await send_quiz(message)

@dp.message_handler()
async def echo_reply(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–æ–±—Ç—É"""
    await message.answer(
        "–¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ü§®\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ /help",
        parse_mode=types.ParseMode.HTML)

@dp.message_handler()
async def send_quiz(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º quiz"""

    mess_string, quiz_list, write_answer_value = gen_quiz()
    markup = types.InlineKeyboardMarkup()

    right_awnswer = lambda answer_str: "–≤–µ—Ä–Ω–æ" \
    if answer_str == write_answer_value else "–Ω–µ –≤–µ—Ä–Ω–æ"

    for var_btn in quiz_list:
        markup.add(
            types.InlineKeyboardButton(var_btn, 
            callback_data=right_awnswer(var_btn)))

    await message.answer(
        mess_string,
        parse_mode=types.ParseMode.HTML,
        reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == '–≤–µ—Ä–Ω–æ')
async def right_answer(callback_query: CallbackQuery):
    """–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–∑ quiz"""
    try:
        if quiz_controller_dict[callback_query.message.chat.id]["quiz_started"]:
            quiz_controller_dict[callback_query.message.chat.id]["attempt"]+=1
            quiz_controller_dict[callback_query.message.chat.id]["right_ans"]+=1
            
            await bot.send_message(callback_query.from_user.id, 
                                        '–ü—Ä–∞–≤–∏–ª—å–Ω–æ &#127881;&#127881;&#127881;',
                                        parse_mode=types.ParseMode.HTML)

        if quiz_controller_dict[callback_query.message.chat.id]["attempt"] < 5:
            await send_quiz(callback_query.message)
        else:
            await print_quiz_results(callback_query.message)
    except KeyError:
        await start_quiz(callback_query.message)

    
@dp.callback_query_handler(lambda c: c.data == '–Ω–µ –≤–µ—Ä–Ω–æ')
async def wrong_answer(callback_query: CallbackQuery):
    """–£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–∑ quiz –Ω–µ–≤–µ—Ä–Ω—ã–π"""
    try:
        if quiz_controller_dict[callback_query.message.chat.id]["quiz_started"]:
            quiz_controller_dict[callback_query.message.chat.id]["attempt"]+=1
            await bot.send_message(callback_query.from_user.id, 
                                '–ú–∏–º–æ &#129398&#129398&#129398',
                                parse_mode=types.ParseMode.HTML)

        if quiz_controller_dict[callback_query.message.chat.id]["attempt"] < 5:
            await send_quiz(callback_query.message)
        else:
            await print_quiz_results(callback_query.message)
    except KeyError:
        await start_quiz(callback_query.message)


@dp.callback_query_handler()
async def print_quiz_results(message: types.Message):
    try:
        quiz_controller_dict[message.chat.id]["quiz_started"]=False
        await message.answer(
                            "–û–∫–µ–π... –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ &#129299\n\n"
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{}</b> –∏–∑ <b>{}</b>!\n\n"
                            "<b>Quiz –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ\n"
                            "–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ /quiz</b>".format(
                                quiz_controller_dict[message.chat.id]["right_ans"],
                                quiz_controller_dict[message.chat.id]["attempt"]),
                                parse_mode=types.ParseMode.HTML)
    except KeyError:
        await message.answer("–£–ø—Å.. –í–∞—à quiz –∫—É–¥–∞ –ø—Ä–æ–ø–∞–ª...&#129325")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)